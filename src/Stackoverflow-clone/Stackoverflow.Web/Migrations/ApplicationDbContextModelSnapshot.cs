// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stackoverflow.Infrastructure;

#nullable disable

namespace Stackoverflow.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stackoverflow.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Downvotes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cad5f124-3a9f-45fc-8553-669146dd08d3"),
                            Body = "I'm looking for tips and advice on how to become a better programmer. Any recommendations on books, online courses, or coding challenges would be greatly appreciated!",
                            CreationDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2391),
                            Downvotes = 2,
                            IsDeleted = false,
                            LastModifiedDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2402),
                            PostType = 0,
                            Title = "How to improve programming skills?",
                            Upvotes = 10,
                            UserId = new Guid("fe6d58b6-c61e-45d1-a797-fc97b00ef640")
                        },
                        new
                        {
                            Id = new Guid("613641bf-ea84-491a-902f-982db227cb1a"),
                            Body = "One way to improve your programming skills is by practicing regularly. Try to solve coding problems daily and participate in coding competitions. Also, consider contributing to open-source projects on platforms like GitHub.",
                            CreationDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2405),
                            Downvotes = 1,
                            IsDeleted = false,
                            LastModifiedDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2406),
                            PostType = 1,
                            Title = "Re: How to improve programming skills?",
                            Upvotes = 15,
                            UserId = new Guid("940a3086-054e-4dbb-8ba3-1b83df4ee62e")
                        },
                        new
                        {
                            Id = new Guid("c40c756c-f117-4fa4-b7c6-a28f01eb6995"),
                            Body = "I'm new to programming and wondering which language I should start learning first. Any recommendations based on ease of learning and job opportunities?",
                            CreationDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2409),
                            Downvotes = 3,
                            IsDeleted = false,
                            LastModifiedDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2409),
                            PostType = 0,
                            Title = "Best programming language for beginners?",
                            Upvotes = 8,
                            UserId = new Guid("ac7bf694-8d79-4b67-bc6c-117e661d75c9")
                        },
                        new
                        {
                            Id = new Guid("4d64c300-950a-4f2b-867f-d3ed6f4f0e2c"),
                            Body = "Python is often recommended for beginners due to its simple syntax and versatility. It's used in various domains such as web development, data science, and automation. Additionally, there are plenty of resources available online for learning Python.",
                            CreationDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2412),
                            Downvotes = 0,
                            IsDeleted = false,
                            LastModifiedDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2412),
                            PostType = 1,
                            Title = "Re: Best programming language for beginners?",
                            Upvotes = 12,
                            UserId = new Guid("e7a46768-075e-41ff-8732-79bc75bf0711")
                        },
                        new
                        {
                            Id = new Guid("a924e31a-0d24-46e5-a3ca-80d31a1a445b"),
                            Body = "I'm preparing for technical interviews and would like some advice on the best way to study and practice. What topics should I focus on, and are there any resources you recommend?",
                            CreationDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2415),
                            Downvotes = 1,
                            IsDeleted = false,
                            LastModifiedDate = new DateTime(2024, 4, 13, 18, 26, 49, 97, DateTimeKind.Local).AddTicks(2416),
                            PostType = 0,
                            Title = "How to prepare for technical interviews?",
                            Upvotes = 6,
                            UserId = new Guid("b8c38056-0974-4493-920f-87ff018274cd")
                        });
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stackoverflow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("Stackoverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
